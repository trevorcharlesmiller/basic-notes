// Mocks generated by Mockito 5.4.5 from annotations
// in basic_notes/test/service/note_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:basic_notes/model/note.dart' as _i5;
import 'package:basic_notes/repository/file/file_note_repository.dart' as _i3;
import 'package:basic_notes/repository/secure/secure_storage_repository.dart'
    as _i6;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFlutterSecureStorage_0 extends _i1.SmartFake
    implements _i2.FlutterSecureStorage {
  _FakeFlutterSecureStorage_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FileNoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileNoteRepository extends _i1.Mock
    implements _i3.FileNoteRepository {
  MockFileNoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Note?> loadNote(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#loadNote, [id]),
            returnValue: _i4.Future<_i5.Note?>.value(),
          )
          as _i4.Future<_i5.Note?>);

  @override
  _i4.Future<void> saveNote(_i5.Note? note) =>
      (super.noSuchMethod(
            Invocation.method(#saveNote, [note]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteNote(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNote, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [SecureStorageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageRepository extends _i1.Mock
    implements _i6.SecureStorageRepository {
  MockSecureStorageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlutterSecureStorage get storage =>
      (super.noSuchMethod(
            Invocation.getter(#storage),
            returnValue: _FakeFlutterSecureStorage_0(
              this,
              Invocation.getter(#storage),
            ),
          )
          as _i2.FlutterSecureStorage);

  @override
  _i4.Future<void> delete(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [key]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> read(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#read, [key]),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> write(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#write, [key, value]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
